// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: test/foo/v1/service/foo.p.j5s.proto

package foo_testspb

import (
	context "context"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	FooQueryService_FooGet_FullMethodName    = "/test.foo.v1.service.FooQueryService/FooGet"
	FooQueryService_FooList_FullMethodName   = "/test.foo.v1.service.FooQueryService/FooList"
	FooQueryService_FooEvents_FullMethodName = "/test.foo.v1.service.FooQueryService/FooEvents"
)

// FooQueryServiceClient is the client API for FooQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FooQueryServiceClient interface {
	FooGet(ctx context.Context, in *FooGetRequest, opts ...grpc.CallOption) (*FooGetResponse, error)
	FooList(ctx context.Context, in *FooListRequest, opts ...grpc.CallOption) (*FooListResponse, error)
	FooEvents(ctx context.Context, in *FooEventsRequest, opts ...grpc.CallOption) (*FooEventsResponse, error)
}

type fooQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFooQueryServiceClient(cc grpc.ClientConnInterface) FooQueryServiceClient {
	return &fooQueryServiceClient{cc}
}

func (c *fooQueryServiceClient) FooGet(ctx context.Context, in *FooGetRequest, opts ...grpc.CallOption) (*FooGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FooGetResponse)
	err := c.cc.Invoke(ctx, FooQueryService_FooGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fooQueryServiceClient) FooList(ctx context.Context, in *FooListRequest, opts ...grpc.CallOption) (*FooListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FooListResponse)
	err := c.cc.Invoke(ctx, FooQueryService_FooList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fooQueryServiceClient) FooEvents(ctx context.Context, in *FooEventsRequest, opts ...grpc.CallOption) (*FooEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FooEventsResponse)
	err := c.cc.Invoke(ctx, FooQueryService_FooEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FooQueryServiceServer is the server API for FooQueryService service.
// All implementations must embed UnimplementedFooQueryServiceServer
// for forward compatibility
type FooQueryServiceServer interface {
	FooGet(context.Context, *FooGetRequest) (*FooGetResponse, error)
	FooList(context.Context, *FooListRequest) (*FooListResponse, error)
	FooEvents(context.Context, *FooEventsRequest) (*FooEventsResponse, error)
	mustEmbedUnimplementedFooQueryServiceServer()
}

// UnimplementedFooQueryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFooQueryServiceServer struct {
}

func (UnimplementedFooQueryServiceServer) FooGet(context.Context, *FooGetRequest) (*FooGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FooGet not implemented")
}
func (UnimplementedFooQueryServiceServer) FooList(context.Context, *FooListRequest) (*FooListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FooList not implemented")
}
func (UnimplementedFooQueryServiceServer) FooEvents(context.Context, *FooEventsRequest) (*FooEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FooEvents not implemented")
}
func (UnimplementedFooQueryServiceServer) mustEmbedUnimplementedFooQueryServiceServer() {}

// UnsafeFooQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FooQueryServiceServer will
// result in compilation errors.
type UnsafeFooQueryServiceServer interface {
	mustEmbedUnimplementedFooQueryServiceServer()
}

func RegisterFooQueryServiceServer(s grpc.ServiceRegistrar, srv FooQueryServiceServer) {
	s.RegisterService(&FooQueryService_ServiceDesc, srv)
}

func _FooQueryService_FooGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FooGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FooQueryServiceServer).FooGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FooQueryService_FooGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FooQueryServiceServer).FooGet(ctx, req.(*FooGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FooQueryService_FooList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FooListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FooQueryServiceServer).FooList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FooQueryService_FooList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FooQueryServiceServer).FooList(ctx, req.(*FooListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FooQueryService_FooEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FooEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FooQueryServiceServer).FooEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FooQueryService_FooEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FooQueryServiceServer).FooEvents(ctx, req.(*FooEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FooQueryService_ServiceDesc is the grpc.ServiceDesc for FooQueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FooQueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "test.foo.v1.service.FooQueryService",
	HandlerType: (*FooQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FooGet",
			Handler:    _FooQueryService_FooGet_Handler,
		},
		{
			MethodName: "FooList",
			Handler:    _FooQueryService_FooList_Handler,
		},
		{
			MethodName: "FooEvents",
			Handler:    _FooQueryService_FooEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "test/foo/v1/service/foo.p.j5s.proto",
}

const (
	FooCommandService_PostFoo_FullMethodName = "/test.foo.v1.service.FooCommandService/PostFoo"
)

// FooCommandServiceClient is the client API for FooCommandService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FooCommandServiceClient interface {
	PostFoo(ctx context.Context, in *PostFooRequest, opts ...grpc.CallOption) (*PostFooResponse, error)
}

type fooCommandServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFooCommandServiceClient(cc grpc.ClientConnInterface) FooCommandServiceClient {
	return &fooCommandServiceClient{cc}
}

func (c *fooCommandServiceClient) PostFoo(ctx context.Context, in *PostFooRequest, opts ...grpc.CallOption) (*PostFooResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostFooResponse)
	err := c.cc.Invoke(ctx, FooCommandService_PostFoo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FooCommandServiceServer is the server API for FooCommandService service.
// All implementations must embed UnimplementedFooCommandServiceServer
// for forward compatibility
type FooCommandServiceServer interface {
	PostFoo(context.Context, *PostFooRequest) (*PostFooResponse, error)
	mustEmbedUnimplementedFooCommandServiceServer()
}

// UnimplementedFooCommandServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFooCommandServiceServer struct {
}

func (UnimplementedFooCommandServiceServer) PostFoo(context.Context, *PostFooRequest) (*PostFooResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostFoo not implemented")
}
func (UnimplementedFooCommandServiceServer) mustEmbedUnimplementedFooCommandServiceServer() {}

// UnsafeFooCommandServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FooCommandServiceServer will
// result in compilation errors.
type UnsafeFooCommandServiceServer interface {
	mustEmbedUnimplementedFooCommandServiceServer()
}

func RegisterFooCommandServiceServer(s grpc.ServiceRegistrar, srv FooCommandServiceServer) {
	s.RegisterService(&FooCommandService_ServiceDesc, srv)
}

func _FooCommandService_PostFoo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostFooRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FooCommandServiceServer).PostFoo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FooCommandService_PostFoo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FooCommandServiceServer).PostFoo(ctx, req.(*PostFooRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FooCommandService_ServiceDesc is the grpc.ServiceDesc for FooCommandService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FooCommandService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "test.foo.v1.service.FooCommandService",
	HandlerType: (*FooCommandServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostFoo",
			Handler:    _FooCommandService_PostFoo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "test/foo/v1/service/foo.p.j5s.proto",
}

const (
	FooDownloadService_DownloadRaw_FullMethodName = "/test.foo.v1.service.FooDownloadService/DownloadRaw"
)

// FooDownloadServiceClient is the client API for FooDownloadService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FooDownloadServiceClient interface {
	DownloadRaw(ctx context.Context, in *DownloadRawRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
}

type fooDownloadServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFooDownloadServiceClient(cc grpc.ClientConnInterface) FooDownloadServiceClient {
	return &fooDownloadServiceClient{cc}
}

func (c *fooDownloadServiceClient) DownloadRaw(ctx context.Context, in *DownloadRawRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, FooDownloadService_DownloadRaw_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FooDownloadServiceServer is the server API for FooDownloadService service.
// All implementations must embed UnimplementedFooDownloadServiceServer
// for forward compatibility
type FooDownloadServiceServer interface {
	DownloadRaw(context.Context, *DownloadRawRequest) (*httpbody.HttpBody, error)
	mustEmbedUnimplementedFooDownloadServiceServer()
}

// UnimplementedFooDownloadServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFooDownloadServiceServer struct {
}

func (UnimplementedFooDownloadServiceServer) DownloadRaw(context.Context, *DownloadRawRequest) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadRaw not implemented")
}
func (UnimplementedFooDownloadServiceServer) mustEmbedUnimplementedFooDownloadServiceServer() {}

// UnsafeFooDownloadServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FooDownloadServiceServer will
// result in compilation errors.
type UnsafeFooDownloadServiceServer interface {
	mustEmbedUnimplementedFooDownloadServiceServer()
}

func RegisterFooDownloadServiceServer(s grpc.ServiceRegistrar, srv FooDownloadServiceServer) {
	s.RegisterService(&FooDownloadService_ServiceDesc, srv)
}

func _FooDownloadService_DownloadRaw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadRawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FooDownloadServiceServer).DownloadRaw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FooDownloadService_DownloadRaw_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FooDownloadServiceServer).DownloadRaw(ctx, req.(*DownloadRawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FooDownloadService_ServiceDesc is the grpc.ServiceDesc for FooDownloadService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FooDownloadService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "test.foo.v1.service.FooDownloadService",
	HandlerType: (*FooDownloadServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DownloadRaw",
			Handler:    _FooDownloadService_DownloadRaw_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "test/foo/v1/service/foo.p.j5s.proto",
}

const (
	HandlerTestService_HandlerGet_FullMethodName = "/test.foo.v1.service.HandlerTestService/HandlerGet"
)

// HandlerTestServiceClient is the client API for HandlerTestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HandlerTestServiceClient interface {
	HandlerGet(ctx context.Context, in *HandlerGetRequest, opts ...grpc.CallOption) (*HandlerGetResponse, error)
}

type handlerTestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHandlerTestServiceClient(cc grpc.ClientConnInterface) HandlerTestServiceClient {
	return &handlerTestServiceClient{cc}
}

func (c *handlerTestServiceClient) HandlerGet(ctx context.Context, in *HandlerGetRequest, opts ...grpc.CallOption) (*HandlerGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HandlerGetResponse)
	err := c.cc.Invoke(ctx, HandlerTestService_HandlerGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HandlerTestServiceServer is the server API for HandlerTestService service.
// All implementations must embed UnimplementedHandlerTestServiceServer
// for forward compatibility
type HandlerTestServiceServer interface {
	HandlerGet(context.Context, *HandlerGetRequest) (*HandlerGetResponse, error)
	mustEmbedUnimplementedHandlerTestServiceServer()
}

// UnimplementedHandlerTestServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHandlerTestServiceServer struct {
}

func (UnimplementedHandlerTestServiceServer) HandlerGet(context.Context, *HandlerGetRequest) (*HandlerGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandlerGet not implemented")
}
func (UnimplementedHandlerTestServiceServer) mustEmbedUnimplementedHandlerTestServiceServer() {}

// UnsafeHandlerTestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HandlerTestServiceServer will
// result in compilation errors.
type UnsafeHandlerTestServiceServer interface {
	mustEmbedUnimplementedHandlerTestServiceServer()
}

func RegisterHandlerTestServiceServer(s grpc.ServiceRegistrar, srv HandlerTestServiceServer) {
	s.RegisterService(&HandlerTestService_ServiceDesc, srv)
}

func _HandlerTestService_HandlerGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandlerGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandlerTestServiceServer).HandlerGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HandlerTestService_HandlerGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandlerTestServiceServer).HandlerGet(ctx, req.(*HandlerGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HandlerTestService_ServiceDesc is the grpc.ServiceDesc for HandlerTestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HandlerTestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "test.foo.v1.service.HandlerTestService",
	HandlerType: (*HandlerTestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandlerGet",
			Handler:    _HandlerTestService_HandlerGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "test/foo/v1/service/foo.p.j5s.proto",
}
