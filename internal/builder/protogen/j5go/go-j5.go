package j5go

import (
	"fmt"

	"github.com/pentops/j5/lib/j5schema"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/types/pluginpb"

	"github.com/pentops/j5/internal/builder/protogen/psm/publish"
	"github.com/pentops/j5/internal/builder/protogen/psm/query"
	"github.com/pentops/j5/internal/builder/protogen/psm/state"
)

const (
	j5reflectImportPath = protogen.GoImportPath("github.com/pentops/j5/lib/j5reflect")
	protoImportPath     = protogen.GoImportPath("google.golang.org/protobuf/proto")
)

func ProtocPlugin() func(gen *protogen.Plugin) error {
	return func(gen *protogen.Plugin) error {
		gen.SupportedFeatures = uint64(pluginpb.CodeGeneratorResponse_FEATURE_PROTO3_OPTIONAL)

		for _, file := range gen.Files {
			if !file.Generate {
				continue
			}
			err := generateFile(gen, file)
			if err != nil {
				gen.Error(err)
				return err
			}
		}
		return nil
	}
}

func generateFile(gen *protogen.Plugin, file *protogen.File) error {

	stateSets, err := state.WalkFile(file)
	if err != nil {
		return err
	}

	if len(stateSets) > 0 {
		filename := file.GeneratedFilenamePrefix + "_psm.pb.go"
		g := gen.NewGeneratedFile(filename, file.GoImportPath)
		g.P("// Code generated by protoc-gen-go-j5. DO NOT EDIT.")
		g.P()
		g.P("package ", file.GoPackageName)
		g.P()

		// Build the state sets from the source file
		for _, stateSet := range stateSets {
			stateSet.Write(g)
		}
	}

	publishSets, err := publish.WalkFile(file)
	if err != nil {
		return err
	}

	if len(publishSets) > 0 {
		filename := file.GeneratedFilenamePrefix + "_psm_publish.pb.go"
		g := gen.NewGeneratedFile(filename, file.GoImportPath)
		g.P("// Code generated by protoc-gen-go-psm. DO NOT EDIT.")
		g.P()
		g.P("package ", file.GoPackageName)
		g.P()

		for _, publishSet := range publishSets {
			publishSet.Write(g)
		}
	}

	querySets, err := query.WalkFile(file)
	if err != nil {
		return err
	}

	if len(querySets) > 0 {
		filename := file.GeneratedFilenamePrefix + "_psm_query.pb.go"
		g := gen.NewGeneratedFile(filename, file.GoImportPath)
		g.P("// Code generated by protoc-gen-go-psm. DO NOT EDIT.")
		g.P()
		g.P("package ", file.GoPackageName)
		g.P()

		for _, querySet := range querySets {
			querySet.Write(g)
		}
	}

	filename := file.GeneratedFilenamePrefix + "_j5.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-go-j5. DO NOT EDIT.")
	g.P()
	g.P("package ", file.GoPackageName)

	var doMsg func(msg *protogen.Message) error
	doMsg = func(msg *protogen.Message) error {
		schema, err := j5schema.Global.Schema(msg.Desc)
		if err != nil {
			return err
		}

		j5Reflect := false
		clone := false
		object := false
		switch schema.(type) {
		case *j5schema.ObjectSchema:
			j5Reflect = true
			clone = true
			object = true

		case *j5schema.OneofSchema:
			j5Reflect = true
			clone = true
		default:
		}

		if j5Reflect {
			g.P("func (msg *", msg.GoIdent, ") J5Reflect() ", j5reflectImportPath.Ident("Root"), " {")
			g.P("  return ", j5reflectImportPath.Ident("MustReflect"), "(msg.ProtoReflect())")
			g.P("}")
			g.P()
		}

		if object {
			g.P("func (msg *", msg.GoIdent, ") J5Object() ", j5reflectImportPath.Ident("Object"), " {")
			g.P("  return ", j5reflectImportPath.Ident("MustReflect"), "(msg.ProtoReflect()).(", j5reflectImportPath.Ident("Object"), ")")
			g.P("}")
			g.P()
		}

		if clone {
			g.P("func (msg *", msg.GoIdent, ") Clone() any {")
			g.P("  return ", protoImportPath.Ident("Clone"), "(msg).(*", msg.GoIdent, ")")
			g.P("}")
		}

		for _, child := range msg.Messages {
			err = doMsg(child)
			if err != nil {
				return fmt.Errorf("error generating message %s: %w", child.GoIdent, err)
			}
		}
		return nil
	}

	for _, msg := range file.Messages {
		err := doMsg(msg)
		if err != nil {
			return fmt.Errorf("error generating message %s: %w", msg.GoIdent, err)
		}
	}
	return nil
}
