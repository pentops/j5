// Code generated by protoc-gen-go-j5. DO NOT EDIT.

package sourcedef_j5pb

import (
	proto "google.golang.org/protobuf/proto"
)

func (msg *SourceFile) Clone() any {
	return proto.Clone(msg).(*SourceFile)
}

// j5.sourcedef.v1 is a J5 schema message, No J5 Methods

func (msg *Package) Clone() any {
	return proto.Clone(msg).(*Package)
}

// j5.sourcedef.v1 is a J5 schema message, No J5 Methods

func (msg *Import) Clone() any {
	return proto.Clone(msg).(*Import)
}

// j5.sourcedef.v1 is a J5 schema message, No J5 Methods

// RootElement is a oneof wrapper
type RootElementTypeKey string

const (
	RootElement_Type_Entity       RootElementTypeKey = "entity"
	RootElement_Type_Oneof        RootElementTypeKey = "oneof"
	RootElement_Type_Object       RootElementTypeKey = "object"
	RootElement_Type_Polymorph    RootElementTypeKey = "polymorph"
	RootElement_Type_Enum         RootElementTypeKey = "enum"
	RootElement_Type_Topic        RootElementTypeKey = "topic"
	RootElement_Type_Service      RootElementTypeKey = "service"
	RootElement_Type_StringFormat RootElementTypeKey = "stringFormat"
)

func (x *RootElement) TypeKey() (RootElementTypeKey, bool) {
	switch x.Type.(type) {
	case *RootElement_Entity:
		return RootElement_Type_Entity, true
	case *RootElement_Oneof:
		return RootElement_Type_Oneof, true
	case *RootElement_Object:
		return RootElement_Type_Object, true
	case *RootElement_Polymorph:
		return RootElement_Type_Polymorph, true
	case *RootElement_Enum:
		return RootElement_Type_Enum, true
	case *RootElement_Topic:
		return RootElement_Type_Topic, true
	case *RootElement_Service:
		return RootElement_Type_Service, true
	case *RootElement_StringFormat:
		return RootElement_Type_StringFormat, true
	default:
		return "", false
	}
}
func (msg *RootElement) Clone() any {
	return proto.Clone(msg).(*RootElement)
}

type IsRootElement_Type = isRootElement_Type

// j5.sourcedef.v1 is a J5 schema message, No J5 Methods

func (msg *Entity) Clone() any {
	return proto.Clone(msg).(*Entity)
}

// j5.sourcedef.v1 is a J5 schema message, No J5 Methods

func (msg *Event) Clone() any {
	return proto.Clone(msg).(*Event)
}

// j5.sourcedef.v1 is a J5 schema message, No J5 Methods

func (msg *Transition) Clone() any {
	return proto.Clone(msg).(*Transition)
}

// j5.sourcedef.v1 is a J5 schema message, No J5 Methods

func (msg *EntityQuery) Clone() any {
	return proto.Clone(msg).(*EntityQuery)
}

// j5.sourcedef.v1 is a J5 schema message, No J5 Methods

func (msg *APIMethod) Clone() any {
	return proto.Clone(msg).(*APIMethod)
}

// j5.sourcedef.v1 is a J5 schema message, No J5 Methods

func (msg *AnonymousObject) Clone() any {
	return proto.Clone(msg).(*AnonymousObject)
}

// j5.sourcedef.v1 is a J5 schema message, No J5 Methods

func (msg *Service) Clone() any {
	return proto.Clone(msg).(*Service)
}

// j5.sourcedef.v1 is a J5 schema message, No J5 Methods

func (msg *EntitySummary) Clone() any {
	return proto.Clone(msg).(*EntitySummary)
}

// j5.sourcedef.v1 is a J5 schema message, No J5 Methods

// NestedSchema is a oneof wrapper
type NestedSchemaTypeKey string

const (
	NestedSchema_Type_Oneof  NestedSchemaTypeKey = "oneof"
	NestedSchema_Type_Object NestedSchemaTypeKey = "object"
	NestedSchema_Type_Enum   NestedSchemaTypeKey = "enum"
)

func (x *NestedSchema) TypeKey() (NestedSchemaTypeKey, bool) {
	switch x.Type.(type) {
	case *NestedSchema_Oneof:
		return NestedSchema_Type_Oneof, true
	case *NestedSchema_Object:
		return NestedSchema_Type_Object, true
	case *NestedSchema_Enum:
		return NestedSchema_Type_Enum, true
	default:
		return "", false
	}
}
func (msg *NestedSchema) Clone() any {
	return proto.Clone(msg).(*NestedSchema)
}

type IsNestedSchema_Type = isNestedSchema_Type

// j5.sourcedef.v1 is a J5 schema message, No J5 Methods

func (msg *EntityKey) Clone() any {
	return proto.Clone(msg).(*EntityKey)
}

// j5.sourcedef.v1 is a J5 schema message, No J5 Methods

func (msg *Oneof) Clone() any {
	return proto.Clone(msg).(*Oneof)
}

// j5.sourcedef.v1 is a J5 schema message, No J5 Methods

func (msg *Object) Clone() any {
	return proto.Clone(msg).(*Object)
}

// j5.sourcedef.v1 is a J5 schema message, No J5 Methods

func (msg *Polymorph) Clone() any {
	return proto.Clone(msg).(*Polymorph)
}

// j5.sourcedef.v1 is a J5 schema message, No J5 Methods

func (msg *EntityElement) Clone() any {
	return proto.Clone(msg).(*EntityElement)
}

// j5.sourcedef.v1 is a J5 schema message, No J5 Methods

func (msg *Topic) Clone() any {
	return proto.Clone(msg).(*Topic)
}

// j5.sourcedef.v1 is a J5 schema message, No J5 Methods

// TopicType is a oneof wrapper
type TopicTypeKey string

const (
	Topic_Type_Publish TopicTypeKey = "publish"
	Topic_Type_Reqres  TopicTypeKey = "reqres"
	Topic_Type_Upsert  TopicTypeKey = "upsert"
	Topic_Type_Event   TopicTypeKey = "event"
)

func (x *TopicType) TypeKey() (TopicTypeKey, bool) {
	switch x.Type.(type) {
	case *TopicType_Publish_:
		return Topic_Type_Publish, true
	case *TopicType_Reqres:
		return Topic_Type_Reqres, true
	case *TopicType_Upsert_:
		return Topic_Type_Upsert, true
	case *TopicType_Event_:
		return Topic_Type_Event, true
	default:
		return "", false
	}
}

type IsTopicTypeWrappedType interface {
	TypeKey() TopicTypeKey
	proto.Message
}

func (x *TopicType) Set(val IsTopicTypeWrappedType) {
	switch v := val.(type) {
	case *TopicType_Publish:
		x.Type = &TopicType_Publish_{Publish: v}
	case *TopicType_ReqRes:
		x.Type = &TopicType_Reqres{Reqres: v}
	case *TopicType_Upsert:
		x.Type = &TopicType_Upsert_{Upsert: v}
	case *TopicType_Event:
		x.Type = &TopicType_Event_{Event: v}
	}
}
func (x *TopicType) Get() IsTopicTypeWrappedType {
	switch v := x.Type.(type) {
	case *TopicType_Publish_:
		return v.Publish
	case *TopicType_Reqres:
		return v.Reqres
	case *TopicType_Upsert_:
		return v.Upsert
	case *TopicType_Event_:
		return v.Event
	default:
		return nil
	}
}
func (x *TopicType_Publish) TypeKey() TopicTypeKey {
	return Topic_Type_Publish
}
func (x *TopicType_ReqRes) TypeKey() TopicTypeKey {
	return Topic_Type_Reqres
}
func (x *TopicType_Upsert) TypeKey() TopicTypeKey {
	return Topic_Type_Upsert
}
func (x *TopicType_Event) TypeKey() TopicTypeKey {
	return Topic_Type_Event
}
func (msg *TopicType) Clone() any {
	return proto.Clone(msg).(*TopicType)
}

type IsTopicType_Type = isTopicType_Type

// j5.sourcedef.v1 is a J5 schema message, No J5 Methods

func (msg *TopicType_Publish) Clone() any {
	return proto.Clone(msg).(*TopicType_Publish)
}

// j5.sourcedef.v1 is a J5 schema message, No J5 Methods

func (msg *TopicType_ReqRes) Clone() any {
	return proto.Clone(msg).(*TopicType_ReqRes)
}

// j5.sourcedef.v1 is a J5 schema message, No J5 Methods

func (msg *TopicType_Upsert) Clone() any {
	return proto.Clone(msg).(*TopicType_Upsert)
}

// j5.sourcedef.v1 is a J5 schema message, No J5 Methods

func (msg *TopicType_Event) Clone() any {
	return proto.Clone(msg).(*TopicType_Event)
}

// j5.sourcedef.v1 is a J5 schema message, No J5 Methods

func (msg *TopicMethod) Clone() any {
	return proto.Clone(msg).(*TopicMethod)
}

// j5.sourcedef.v1 is a J5 schema message, No J5 Methods
