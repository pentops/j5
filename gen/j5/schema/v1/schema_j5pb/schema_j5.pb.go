// Code generated by protoc-gen-go-j5. DO NOT EDIT.
// No J5 Methods, this is a j5 schema package

package schema_j5pb

import (
	driver "database/sql/driver"
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
)

// RootSchema is a oneof wrapper
type RootSchemaTypeKey string

const (
	RootSchema_Type_Oneof     RootSchemaTypeKey = "oneof"
	RootSchema_Type_Object    RootSchemaTypeKey = "object"
	RootSchema_Type_Enum      RootSchemaTypeKey = "enum"
	RootSchema_Type_Polymorph RootSchemaTypeKey = "polymorph"
)

func (x *RootSchema) TypeKey() (RootSchemaTypeKey, bool) {
	switch x.Type.(type) {
	case *RootSchema_Oneof:
		return RootSchema_Type_Oneof, true
	case *RootSchema_Object:
		return RootSchema_Type_Object, true
	case *RootSchema_Enum:
		return RootSchema_Type_Enum, true
	case *RootSchema_Polymorph:
		return RootSchema_Type_Polymorph, true
	default:
		return "", false
	}
}

type IsRootSchemaWrappedType interface {
	RootSchemaTypeKey() RootSchemaTypeKey
	proto.Message
}

func (x *RootSchema) Set(val IsRootSchemaWrappedType) {
	switch v := val.(type) {
	case *Oneof:
		x.Type = &RootSchema_Oneof{Oneof: v}
	case *Object:
		x.Type = &RootSchema_Object{Object: v}
	case *Enum:
		x.Type = &RootSchema_Enum{Enum: v}
	case *Polymorph:
		x.Type = &RootSchema_Polymorph{Polymorph: v}
	}
}
func (x *RootSchema) Get() IsRootSchemaWrappedType {
	switch v := x.Type.(type) {
	case *RootSchema_Oneof:
		return v.Oneof
	case *RootSchema_Object:
		return v.Object
	case *RootSchema_Enum:
		return v.Enum
	case *RootSchema_Polymorph:
		return v.Polymorph
	default:
		return nil
	}
}
func (x *Oneof) RootSchemaTypeKey() RootSchemaTypeKey {
	return RootSchema_Type_Oneof
}
func (x *Object) RootSchemaTypeKey() RootSchemaTypeKey {
	return RootSchema_Type_Object
}
func (x *Enum) RootSchemaTypeKey() RootSchemaTypeKey {
	return RootSchema_Type_Enum
}
func (x *Polymorph) RootSchemaTypeKey() RootSchemaTypeKey {
	return RootSchema_Type_Polymorph
}
func (msg *RootSchema) Clone() any {
	return proto.Clone(msg).(*RootSchema)
}

type IsRootSchema_Type = isRootSchema_Type

// Field is a oneof wrapper
type FieldTypeKey string

const (
	Field_Type_Any       FieldTypeKey = "any"
	Field_Type_Oneof     FieldTypeKey = "oneof"
	Field_Type_Object    FieldTypeKey = "object"
	Field_Type_Polymorph FieldTypeKey = "polymorph"
	Field_Type_Enum      FieldTypeKey = "enum"
	Field_Type_Array     FieldTypeKey = "array"
	Field_Type_Map       FieldTypeKey = "map"
	Field_Type_String_   FieldTypeKey = "string"
	Field_Type_Integer   FieldTypeKey = "integer"
	Field_Type_Float     FieldTypeKey = "float"
	Field_Type_Bool      FieldTypeKey = "bool"
	Field_Type_Bytes     FieldTypeKey = "bytes"
	Field_Type_Decimal   FieldTypeKey = "decimal"
	Field_Type_Date      FieldTypeKey = "date"
	Field_Type_Timestamp FieldTypeKey = "timestamp"
	Field_Type_Key       FieldTypeKey = "key"
)

func (x *Field) TypeKey() (FieldTypeKey, bool) {
	switch x.Type.(type) {
	case *Field_Any:
		return Field_Type_Any, true
	case *Field_Oneof:
		return Field_Type_Oneof, true
	case *Field_Object:
		return Field_Type_Object, true
	case *Field_Polymorph:
		return Field_Type_Polymorph, true
	case *Field_Enum:
		return Field_Type_Enum, true
	case *Field_Array:
		return Field_Type_Array, true
	case *Field_Map:
		return Field_Type_Map, true
	case *Field_String_:
		return Field_Type_String_, true
	case *Field_Integer:
		return Field_Type_Integer, true
	case *Field_Float:
		return Field_Type_Float, true
	case *Field_Bool:
		return Field_Type_Bool, true
	case *Field_Bytes:
		return Field_Type_Bytes, true
	case *Field_Decimal:
		return Field_Type_Decimal, true
	case *Field_Date:
		return Field_Type_Date, true
	case *Field_Timestamp:
		return Field_Type_Timestamp, true
	case *Field_Key:
		return Field_Type_Key, true
	default:
		return "", false
	}
}

type IsFieldWrappedType interface {
	FieldTypeKey() FieldTypeKey
	proto.Message
}

func (x *Field) Set(val IsFieldWrappedType) {
	switch v := val.(type) {
	case *AnyField:
		x.Type = &Field_Any{Any: v}
	case *OneofField:
		x.Type = &Field_Oneof{Oneof: v}
	case *ObjectField:
		x.Type = &Field_Object{Object: v}
	case *PolymorphField:
		x.Type = &Field_Polymorph{Polymorph: v}
	case *EnumField:
		x.Type = &Field_Enum{Enum: v}
	case *ArrayField:
		x.Type = &Field_Array{Array: v}
	case *MapField:
		x.Type = &Field_Map{Map: v}
	case *StringField:
		x.Type = &Field_String_{String_: v}
	case *IntegerField:
		x.Type = &Field_Integer{Integer: v}
	case *FloatField:
		x.Type = &Field_Float{Float: v}
	case *BoolField:
		x.Type = &Field_Bool{Bool: v}
	case *BytesField:
		x.Type = &Field_Bytes{Bytes: v}
	case *DecimalField:
		x.Type = &Field_Decimal{Decimal: v}
	case *DateField:
		x.Type = &Field_Date{Date: v}
	case *TimestampField:
		x.Type = &Field_Timestamp{Timestamp: v}
	case *KeyField:
		x.Type = &Field_Key{Key: v}
	}
}
func (x *Field) Get() IsFieldWrappedType {
	switch v := x.Type.(type) {
	case *Field_Any:
		return v.Any
	case *Field_Oneof:
		return v.Oneof
	case *Field_Object:
		return v.Object
	case *Field_Polymorph:
		return v.Polymorph
	case *Field_Enum:
		return v.Enum
	case *Field_Array:
		return v.Array
	case *Field_Map:
		return v.Map
	case *Field_String_:
		return v.String_
	case *Field_Integer:
		return v.Integer
	case *Field_Float:
		return v.Float
	case *Field_Bool:
		return v.Bool
	case *Field_Bytes:
		return v.Bytes
	case *Field_Decimal:
		return v.Decimal
	case *Field_Date:
		return v.Date
	case *Field_Timestamp:
		return v.Timestamp
	case *Field_Key:
		return v.Key
	default:
		return nil
	}
}
func (x *AnyField) FieldTypeKey() FieldTypeKey {
	return Field_Type_Any
}
func (x *OneofField) FieldTypeKey() FieldTypeKey {
	return Field_Type_Oneof
}
func (x *ObjectField) FieldTypeKey() FieldTypeKey {
	return Field_Type_Object
}
func (x *PolymorphField) FieldTypeKey() FieldTypeKey {
	return Field_Type_Polymorph
}
func (x *EnumField) FieldTypeKey() FieldTypeKey {
	return Field_Type_Enum
}
func (x *ArrayField) FieldTypeKey() FieldTypeKey {
	return Field_Type_Array
}
func (x *MapField) FieldTypeKey() FieldTypeKey {
	return Field_Type_Map
}
func (x *StringField) FieldTypeKey() FieldTypeKey {
	return Field_Type_String_
}
func (x *IntegerField) FieldTypeKey() FieldTypeKey {
	return Field_Type_Integer
}
func (x *FloatField) FieldTypeKey() FieldTypeKey {
	return Field_Type_Float
}
func (x *BoolField) FieldTypeKey() FieldTypeKey {
	return Field_Type_Bool
}
func (x *BytesField) FieldTypeKey() FieldTypeKey {
	return Field_Type_Bytes
}
func (x *DecimalField) FieldTypeKey() FieldTypeKey {
	return Field_Type_Decimal
}
func (x *DateField) FieldTypeKey() FieldTypeKey {
	return Field_Type_Date
}
func (x *TimestampField) FieldTypeKey() FieldTypeKey {
	return Field_Type_Timestamp
}
func (x *KeyField) FieldTypeKey() FieldTypeKey {
	return Field_Type_Key
}
func (msg *Field) Clone() any {
	return proto.Clone(msg).(*Field)
}

type IsField_Type = isField_Type

func (msg *Ref) Clone() any {
	return proto.Clone(msg).(*Ref)
}
func (msg *EntityRef) Clone() any {
	return proto.Clone(msg).(*EntityRef)
}
func (msg *AnyField) Clone() any {
	return proto.Clone(msg).(*AnyField)
}
func (msg *ObjectField) Clone() any {
	return proto.Clone(msg).(*ObjectField)
}

type IsObjectField_Schema = isObjectField_Schema

func (msg *ObjectField_Rules) Clone() any {
	return proto.Clone(msg).(*ObjectField_Rules)
}
func (msg *ObjectField_Ext) Clone() any {
	return proto.Clone(msg).(*ObjectField_Ext)
}
func (msg *ObjectField_EntityJoin) Clone() any {
	return proto.Clone(msg).(*ObjectField_EntityJoin)
}
func (msg *InlineObject) Clone() any {
	return proto.Clone(msg).(*InlineObject)
}
func (msg *Object) Clone() any {
	return proto.Clone(msg).(*Object)
}
func (msg *EntityObject) Clone() any {
	return proto.Clone(msg).(*EntityObject)
}
func (msg *PolymorphField) Clone() any {
	return proto.Clone(msg).(*PolymorphField)
}

type IsPolymorphField_Schema = isPolymorphField_Schema

func (msg *PolymorphField_Rules) Clone() any {
	return proto.Clone(msg).(*PolymorphField_Rules)
}
func (msg *PolymorphField_Ext) Clone() any {
	return proto.Clone(msg).(*PolymorphField_Ext)
}
func (msg *Polymorph) Clone() any {
	return proto.Clone(msg).(*Polymorph)
}
func (msg *OneofField) Clone() any {
	return proto.Clone(msg).(*OneofField)
}

type IsOneofField_Schema = isOneofField_Schema

func (msg *OneofField_Rules) Clone() any {
	return proto.Clone(msg).(*OneofField_Rules)
}
func (msg *OneofField_Ext) Clone() any {
	return proto.Clone(msg).(*OneofField_Ext)
}
func (msg *Oneof) Clone() any {
	return proto.Clone(msg).(*Oneof)
}
func (msg *EnumField) Clone() any {
	return proto.Clone(msg).(*EnumField)
}

type IsEnumField_Schema = isEnumField_Schema

func (msg *EnumField_Rules) Clone() any {
	return proto.Clone(msg).(*EnumField_Rules)
}
func (msg *EnumField_Ext) Clone() any {
	return proto.Clone(msg).(*EnumField_Ext)
}
func (msg *Enum) Clone() any {
	return proto.Clone(msg).(*Enum)
}
func (msg *Enum_Option) Clone() any {
	return proto.Clone(msg).(*Enum_Option)
}
func (msg *Enum_OptionInfoField) Clone() any {
	return proto.Clone(msg).(*Enum_OptionInfoField)
}
func (msg *ArrayField) Clone() any {
	return proto.Clone(msg).(*ArrayField)
}
func (msg *ArrayField_Ext) Clone() any {
	return proto.Clone(msg).(*ArrayField_Ext)
}
func (msg *ArrayField_Rules) Clone() any {
	return proto.Clone(msg).(*ArrayField_Rules)
}
func (msg *MapField) Clone() any {
	return proto.Clone(msg).(*MapField)
}
func (msg *MapField_Rules) Clone() any {
	return proto.Clone(msg).(*MapField_Rules)
}
func (msg *MapField_Ext) Clone() any {
	return proto.Clone(msg).(*MapField_Ext)
}
func (msg *StringFormat) Clone() any {
	return proto.Clone(msg).(*StringFormat)
}
func (msg *StringField) Clone() any {
	return proto.Clone(msg).(*StringField)
}
func (msg *StringField_Rules) Clone() any {
	return proto.Clone(msg).(*StringField_Rules)
}
func (msg *StringField_Ext) Clone() any {
	return proto.Clone(msg).(*StringField_Ext)
}
func (msg *KeyField) Clone() any {
	return proto.Clone(msg).(*KeyField)
}
func (msg *KeyField_Rules) Clone() any {
	return proto.Clone(msg).(*KeyField_Rules)
}
func (msg *KeyField_Ext) Clone() any {
	return proto.Clone(msg).(*KeyField_Ext)
}

// KeyField_DeprecatedEntityKey is a oneof wrapper
type KeyField_DeprecatedEntityKeyTypeKey string

const (
	KeyField_DeprecatedEntityKey_Type_PrimaryKey KeyField_DeprecatedEntityKeyTypeKey = "primaryKey"
	KeyField_DeprecatedEntityKey_Type_ForeignKey KeyField_DeprecatedEntityKeyTypeKey = "foreignKey"
)

func (x *KeyField_DeprecatedEntityKey) TypeKey() (KeyField_DeprecatedEntityKeyTypeKey, bool) {
	switch x.Type.(type) {
	case *KeyField_DeprecatedEntityKey_PrimaryKey:
		return KeyField_DeprecatedEntityKey_Type_PrimaryKey, true
	case *KeyField_DeprecatedEntityKey_ForeignKey:
		return KeyField_DeprecatedEntityKey_Type_ForeignKey, true
	default:
		return "", false
	}
}
func (msg *KeyField_DeprecatedEntityKey) Clone() any {
	return proto.Clone(msg).(*KeyField_DeprecatedEntityKey)
}

type IsKeyField_DeprecatedEntityKey_Type = isKeyField_DeprecatedEntityKey_Type

// KeyFormat is a oneof wrapper
type KeyFormatTypeKey string

const (
	KeyFormat_Type_Informal KeyFormatTypeKey = "informal"
	KeyFormat_Type_Custom   KeyFormatTypeKey = "custom"
	KeyFormat_Type_Uuid     KeyFormatTypeKey = "uuid"
	KeyFormat_Type_Id62     KeyFormatTypeKey = "id62"
	KeyFormat_Type_Format   KeyFormatTypeKey = "format"
)

func (x *KeyFormat) TypeKey() (KeyFormatTypeKey, bool) {
	switch x.Type.(type) {
	case *KeyFormat_Informal_:
		return KeyFormat_Type_Informal, true
	case *KeyFormat_Custom_:
		return KeyFormat_Type_Custom, true
	case *KeyFormat_Uuid:
		return KeyFormat_Type_Uuid, true
	case *KeyFormat_Id62:
		return KeyFormat_Type_Id62, true
	case *KeyFormat_Format:
		return KeyFormat_Type_Format, true
	default:
		return "", false
	}
}

type IsKeyFormatWrappedType interface {
	KeyFormatTypeKey() KeyFormatTypeKey
	proto.Message
}

func (x *KeyFormat) Set(val IsKeyFormatWrappedType) {
	switch v := val.(type) {
	case *KeyFormat_Informal:
		x.Type = &KeyFormat_Informal_{Informal: v}
	case *KeyFormat_Custom:
		x.Type = &KeyFormat_Custom_{Custom: v}
	case *KeyFormat_UUID:
		x.Type = &KeyFormat_Uuid{Uuid: v}
	case *KeyFormat_ID62:
		x.Type = &KeyFormat_Id62{Id62: v}
	case *StringFormat:
		x.Type = &KeyFormat_Format{Format: v}
	}
}
func (x *KeyFormat) Get() IsKeyFormatWrappedType {
	switch v := x.Type.(type) {
	case *KeyFormat_Informal_:
		return v.Informal
	case *KeyFormat_Custom_:
		return v.Custom
	case *KeyFormat_Uuid:
		return v.Uuid
	case *KeyFormat_Id62:
		return v.Id62
	case *KeyFormat_Format:
		return v.Format
	default:
		return nil
	}
}
func (x *KeyFormat_Informal) KeyFormatTypeKey() KeyFormatTypeKey {
	return KeyFormat_Type_Informal
}
func (x *KeyFormat_Custom) KeyFormatTypeKey() KeyFormatTypeKey {
	return KeyFormat_Type_Custom
}
func (x *KeyFormat_UUID) KeyFormatTypeKey() KeyFormatTypeKey {
	return KeyFormat_Type_Uuid
}
func (x *KeyFormat_ID62) KeyFormatTypeKey() KeyFormatTypeKey {
	return KeyFormat_Type_Id62
}
func (x *StringFormat) KeyFormatTypeKey() KeyFormatTypeKey {
	return KeyFormat_Type_Format
}
func (msg *KeyFormat) Clone() any {
	return proto.Clone(msg).(*KeyFormat)
}

type IsKeyFormat_Type = isKeyFormat_Type

func (msg *KeyFormat_Informal) Clone() any {
	return proto.Clone(msg).(*KeyFormat_Informal)
}
func (msg *KeyFormat_Custom) Clone() any {
	return proto.Clone(msg).(*KeyFormat_Custom)
}
func (msg *KeyFormat_UUID) Clone() any {
	return proto.Clone(msg).(*KeyFormat_UUID)
}
func (msg *KeyFormat_ID62) Clone() any {
	return proto.Clone(msg).(*KeyFormat_ID62)
}
func (msg *FloatField) Clone() any {
	return proto.Clone(msg).(*FloatField)
}
func (msg *FloatField_Rules) Clone() any {
	return proto.Clone(msg).(*FloatField_Rules)
}
func (msg *FloatField_Ext) Clone() any {
	return proto.Clone(msg).(*FloatField_Ext)
}

// FloatField_Format
const (
	FloatField_Format_UNSPECIFIED FloatField_Format = 0
	FloatField_Format_FLOAT32     FloatField_Format = 1
	FloatField_Format_FLOAT64     FloatField_Format = 2
)

var (
	FloatField_Format_name_short = map[int32]string{
		0: "UNSPECIFIED",
		1: "FLOAT32",
		2: "FLOAT64",
	}
	FloatField_Format_value_short = map[string]int32{
		"UNSPECIFIED": 0,
		"FLOAT32":     1,
		"FLOAT64":     2,
	}
	FloatField_Format_value_either = map[string]int32{
		"UNSPECIFIED":        0,
		"FORMAT_UNSPECIFIED": 0,
		"FLOAT32":            1,
		"FORMAT_FLOAT32":     1,
		"FLOAT64":            2,
		"FORMAT_FLOAT64":     2,
	}
)

// ShortString returns the un-prefixed string representation of the enum value
func (x FloatField_Format) ShortString() string {
	return FloatField_Format_name_short[int32(x)]
}
func (x FloatField_Format) Value() (driver.Value, error) {
	return []uint8(x.ShortString()), nil
}
func (x *FloatField_Format) Scan(value interface{}) error {
	var strVal string
	switch vt := value.(type) {
	case []uint8:
		strVal = string(vt)
	case string:
		strVal = vt
	default:
		return fmt.Errorf("invalid type %T", value)
	}
	val := FloatField_Format_value_either[strVal]
	*x = FloatField_Format(val)
	return nil
}
func (msg *IntegerField) Clone() any {
	return proto.Clone(msg).(*IntegerField)
}
func (msg *IntegerField_Rules) Clone() any {
	return proto.Clone(msg).(*IntegerField_Rules)
}
func (msg *IntegerField_Ext) Clone() any {
	return proto.Clone(msg).(*IntegerField_Ext)
}

// IntegerField_Format
const (
	IntegerField_Format_UNSPECIFIED IntegerField_Format = 0
	IntegerField_Format_INT32       IntegerField_Format = 1
	IntegerField_Format_INT64       IntegerField_Format = 2
	IntegerField_Format_UINT32      IntegerField_Format = 3
	IntegerField_Format_UINT64      IntegerField_Format = 4
)

var (
	IntegerField_Format_name_short = map[int32]string{
		0: "UNSPECIFIED",
		1: "INT32",
		2: "INT64",
		3: "UINT32",
		4: "UINT64",
	}
	IntegerField_Format_value_short = map[string]int32{
		"UNSPECIFIED": 0,
		"INT32":       1,
		"INT64":       2,
		"UINT32":      3,
		"UINT64":      4,
	}
	IntegerField_Format_value_either = map[string]int32{
		"UNSPECIFIED":        0,
		"FORMAT_UNSPECIFIED": 0,
		"INT32":              1,
		"FORMAT_INT32":       1,
		"INT64":              2,
		"FORMAT_INT64":       2,
		"UINT32":             3,
		"FORMAT_UINT32":      3,
		"UINT64":             4,
		"FORMAT_UINT64":      4,
	}
)

// ShortString returns the un-prefixed string representation of the enum value
func (x IntegerField_Format) ShortString() string {
	return IntegerField_Format_name_short[int32(x)]
}
func (x IntegerField_Format) Value() (driver.Value, error) {
	return []uint8(x.ShortString()), nil
}
func (x *IntegerField_Format) Scan(value interface{}) error {
	var strVal string
	switch vt := value.(type) {
	case []uint8:
		strVal = string(vt)
	case string:
		strVal = vt
	default:
		return fmt.Errorf("invalid type %T", value)
	}
	val := IntegerField_Format_value_either[strVal]
	*x = IntegerField_Format(val)
	return nil
}
func (msg *BoolField) Clone() any {
	return proto.Clone(msg).(*BoolField)
}
func (msg *BoolField_Rules) Clone() any {
	return proto.Clone(msg).(*BoolField_Rules)
}
func (msg *BoolField_Ext) Clone() any {
	return proto.Clone(msg).(*BoolField_Ext)
}
func (msg *BytesField) Clone() any {
	return proto.Clone(msg).(*BytesField)
}
func (msg *BytesField_Rules) Clone() any {
	return proto.Clone(msg).(*BytesField_Rules)
}
func (msg *BytesField_Ext) Clone() any {
	return proto.Clone(msg).(*BytesField_Ext)
}
func (msg *DecimalField) Clone() any {
	return proto.Clone(msg).(*DecimalField)
}
func (msg *DecimalField_Rules) Clone() any {
	return proto.Clone(msg).(*DecimalField_Rules)
}
func (msg *DecimalField_Ext) Clone() any {
	return proto.Clone(msg).(*DecimalField_Ext)
}
func (msg *DateField) Clone() any {
	return proto.Clone(msg).(*DateField)
}
func (msg *DateField_Rules) Clone() any {
	return proto.Clone(msg).(*DateField_Rules)
}
func (msg *DateField_Ext) Clone() any {
	return proto.Clone(msg).(*DateField_Ext)
}
func (msg *TimestampField) Clone() any {
	return proto.Clone(msg).(*TimestampField)
}
func (msg *TimestampField_Rules) Clone() any {
	return proto.Clone(msg).(*TimestampField_Rules)
}
func (msg *TimestampField_Ext) Clone() any {
	return proto.Clone(msg).(*TimestampField_Ext)
}
func (msg *ObjectProperty) Clone() any {
	return proto.Clone(msg).(*ObjectProperty)
}
func (msg *EntityKey) Clone() any {
	return proto.Clone(msg).(*EntityKey)
}

// EntityPart
const (
	EntityPart_UNSPECIFIED EntityPart = 0
	EntityPart_KEYS        EntityPart = 1
	EntityPart_STATE       EntityPart = 2
	EntityPart_EVENT       EntityPart = 3
	EntityPart_DATA        EntityPart = 4
	EntityPart_REFERENCES  EntityPart = 5
	EntityPart_DERIVED     EntityPart = 6
)

var (
	EntityPart_name_short = map[int32]string{
		0: "UNSPECIFIED",
		1: "KEYS",
		2: "STATE",
		3: "EVENT",
		4: "DATA",
		5: "REFERENCES",
		6: "DERIVED",
	}
	EntityPart_value_short = map[string]int32{
		"UNSPECIFIED": 0,
		"KEYS":        1,
		"STATE":       2,
		"EVENT":       3,
		"DATA":        4,
		"REFERENCES":  5,
		"DERIVED":     6,
	}
	EntityPart_value_either = map[string]int32{
		"UNSPECIFIED":             0,
		"ENTITY_PART_UNSPECIFIED": 0,
		"KEYS":                    1,
		"ENTITY_PART_KEYS":        1,
		"STATE":                   2,
		"ENTITY_PART_STATE":       2,
		"EVENT":                   3,
		"ENTITY_PART_EVENT":       3,
		"DATA":                    4,
		"ENTITY_PART_DATA":        4,
		"REFERENCES":              5,
		"ENTITY_PART_REFERENCES":  5,
		"DERIVED":                 6,
		"ENTITY_PART_DERIVED":     6,
	}
)

// ShortString returns the un-prefixed string representation of the enum value
func (x EntityPart) ShortString() string {
	return EntityPart_name_short[int32(x)]
}
func (x EntityPart) Value() (driver.Value, error) {
	return []uint8(x.ShortString()), nil
}
func (x *EntityPart) Scan(value interface{}) error {
	var strVal string
	switch vt := value.(type) {
	case []uint8:
		strVal = string(vt)
	case string:
		strVal = vt
	default:
		return fmt.Errorf("invalid type %T", value)
	}
	val := EntityPart_value_either[strVal]
	*x = EntityPart(val)
	return nil
}
