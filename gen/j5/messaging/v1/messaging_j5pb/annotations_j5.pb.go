// Code generated by protoc-gen-go-j5. DO NOT EDIT.

package messaging_j5pb

import (
	proto "google.golang.org/protobuf/proto"
)

func (msg *ServiceConfig) Clone() any {
	return proto.Clone(msg).(*ServiceConfig)
}

type IsServiceConfig_Role = isServiceConfig_Role

// j5.messaging.v1 is a J5 schema message, No J5 Methods

func (msg *ServiceConfig_Publish) Clone() any {
	return proto.Clone(msg).(*ServiceConfig_Publish)
}

// j5.messaging.v1 is a J5 schema message, No J5 Methods

func (msg *ServiceConfig_Request) Clone() any {
	return proto.Clone(msg).(*ServiceConfig_Request)
}

// j5.messaging.v1 is a J5 schema message, No J5 Methods

func (msg *ServiceConfig_Reply) Clone() any {
	return proto.Clone(msg).(*ServiceConfig_Reply)
}

// j5.messaging.v1 is a J5 schema message, No J5 Methods

func (msg *ServiceConfig_Event) Clone() any {
	return proto.Clone(msg).(*ServiceConfig_Event)
}

// j5.messaging.v1 is a J5 schema message, No J5 Methods

func (msg *ServiceConfig_Upsert) Clone() any {
	return proto.Clone(msg).(*ServiceConfig_Upsert)
}

// j5.messaging.v1 is a J5 schema message, No J5 Methods

func (msg *PublishMethod) Clone() any {
	return proto.Clone(msg).(*PublishMethod)
}

// j5.messaging.v1 is a J5 schema message, No J5 Methods

func (msg *RequestMethod) Clone() any {
	return proto.Clone(msg).(*RequestMethod)
}

// j5.messaging.v1 is a J5 schema message, No J5 Methods

func (msg *ReplyMethod) Clone() any {
	return proto.Clone(msg).(*ReplyMethod)
}

// j5.messaging.v1 is a J5 schema message, No J5 Methods

// Config is a oneof wrapper
type ConfigTypeKey string

const (
	Config_Type_Broadcast ConfigTypeKey = "broadcast"
	Config_Type_Unicast   ConfigTypeKey = "unicast"
	Config_Type_Request   ConfigTypeKey = "request"
	Config_Type_Reply     ConfigTypeKey = "reply"
)

func (x *Config) TypeKey() (ConfigTypeKey, bool) {
	switch x.Type.(type) {
	case *Config_Broadcast:
		return Config_Type_Broadcast, true
	case *Config_Unicast:
		return Config_Type_Unicast, true
	case *Config_Request:
		return Config_Type_Request, true
	case *Config_Reply:
		return Config_Type_Reply, true
	default:
		return "", false
	}
}

type IsConfigWrappedType interface {
	TypeKey() ConfigTypeKey
	proto.Message
}

func (x *Config) Set(val IsConfigWrappedType) {
	switch v := val.(type) {
	case *BroadcastConfig:
		x.Type = &Config_Broadcast{Broadcast: v}
	case *UnicastConfig:
		x.Type = &Config_Unicast{Unicast: v}
	case *RequestConfig:
		x.Type = &Config_Request{Request: v}
	case *ReplyConfig:
		x.Type = &Config_Reply{Reply: v}
	}
}
func (x *Config) Get() IsConfigWrappedType {
	switch v := x.Type.(type) {
	case *Config_Broadcast:
		return v.Broadcast
	case *Config_Unicast:
		return v.Unicast
	case *Config_Request:
		return v.Request
	case *Config_Reply:
		return v.Reply
	default:
		return nil
	}
}
func (x *BroadcastConfig) TypeKey() ConfigTypeKey {
	return Config_Type_Broadcast
}
func (x *UnicastConfig) TypeKey() ConfigTypeKey {
	return Config_Type_Unicast
}
func (x *RequestConfig) TypeKey() ConfigTypeKey {
	return Config_Type_Request
}
func (x *ReplyConfig) TypeKey() ConfigTypeKey {
	return Config_Type_Reply
}
func (msg *Config) Clone() any {
	return proto.Clone(msg).(*Config)
}

type IsConfig_Type = isConfig_Type

// j5.messaging.v1 is a J5 schema message, No J5 Methods

func (msg *BroadcastConfig) Clone() any {
	return proto.Clone(msg).(*BroadcastConfig)
}

// j5.messaging.v1 is a J5 schema message, No J5 Methods

func (msg *UnicastConfig) Clone() any {
	return proto.Clone(msg).(*UnicastConfig)
}

// j5.messaging.v1 is a J5 schema message, No J5 Methods

func (msg *RequestConfig) Clone() any {
	return proto.Clone(msg).(*RequestConfig)
}

// j5.messaging.v1 is a J5 schema message, No J5 Methods

func (msg *ReplyConfig) Clone() any {
	return proto.Clone(msg).(*ReplyConfig)
}

// j5.messaging.v1 is a J5 schema message, No J5 Methods

func (msg *FieldConfig) Clone() any {
	return proto.Clone(msg).(*FieldConfig)
}

// j5.messaging.v1 is a J5 schema message, No J5 Methods
