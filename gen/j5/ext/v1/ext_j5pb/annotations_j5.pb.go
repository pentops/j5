// Code generated by protoc-gen-go-j5. DO NOT EDIT.

package ext_j5pb

import (
	driver "database/sql/driver"
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
)

func (msg *PackageOptions) Clone() any {
	return proto.Clone(msg).(*PackageOptions)
}

// j5.ext.v1 is a J5 schema message, No J5 Methods

func (msg *StringFormat) Clone() any {
	return proto.Clone(msg).(*StringFormat)
}

// j5.ext.v1 is a J5 schema message, No J5 Methods

func (msg *PSMOptions) Clone() any {
	return proto.Clone(msg).(*PSMOptions)
}

// j5.ext.v1 is a J5 schema message, No J5 Methods

func (msg *ServiceOptions) Clone() any {
	return proto.Clone(msg).(*ServiceOptions)
}

type IsServiceOptions_Type = isServiceOptions_Type

// j5.ext.v1 is a J5 schema message, No J5 Methods

func (msg *ServiceOptions_StateQuery) Clone() any {
	return proto.Clone(msg).(*ServiceOptions_StateQuery)
}

// j5.ext.v1 is a J5 schema message, No J5 Methods

func (msg *ServiceOptions_StateCommand) Clone() any {
	return proto.Clone(msg).(*ServiceOptions_StateCommand)
}

// j5.ext.v1 is a J5 schema message, No J5 Methods

func (msg *MessageOptions) Clone() any {
	return proto.Clone(msg).(*MessageOptions)
}

type IsMessageOptions_Type = isMessageOptions_Type

// j5.ext.v1 is a J5 schema message, No J5 Methods

func (msg *ObjectMessageOptions) Clone() any {
	return proto.Clone(msg).(*ObjectMessageOptions)
}

// j5.ext.v1 is a J5 schema message, No J5 Methods

func (msg *OneofMessageOptions) Clone() any {
	return proto.Clone(msg).(*OneofMessageOptions)
}

// j5.ext.v1 is a J5 schema message, No J5 Methods

func (msg *PolymorphMessageOptions) Clone() any {
	return proto.Clone(msg).(*PolymorphMessageOptions)
}

// j5.ext.v1 is a J5 schema message, No J5 Methods

func (msg *MethodOptions) Clone() any {
	return proto.Clone(msg).(*MethodOptions)
}

// j5.ext.v1 is a J5 schema message, No J5 Methods

func (msg *StateQueryMethodOptions) Clone() any {
	return proto.Clone(msg).(*StateQueryMethodOptions)
}

// j5.ext.v1 is a J5 schema message, No J5 Methods

func (msg *EnumOptions) Clone() any {
	return proto.Clone(msg).(*EnumOptions)
}

// j5.ext.v1 is a J5 schema message, No J5 Methods

func (msg *EnumInfoField) Clone() any {
	return proto.Clone(msg).(*EnumInfoField)
}

// j5.ext.v1 is a J5 schema message, No J5 Methods

func (msg *EnumValueOptions) Clone() any {
	return proto.Clone(msg).(*EnumValueOptions)
}

// j5.ext.v1 is a J5 schema message, No J5 Methods

func (msg *FieldOptions) Clone() any {
	return proto.Clone(msg).(*FieldOptions)
}

type IsFieldOptions_Type = isFieldOptions_Type

// j5.ext.v1 is a J5 schema message, No J5 Methods

func (msg *AnyField) Clone() any {
	return proto.Clone(msg).(*AnyField)
}

// j5.ext.v1 is a J5 schema message, No J5 Methods

func (msg *ObjectField) Clone() any {
	return proto.Clone(msg).(*ObjectField)
}

// j5.ext.v1 is a J5 schema message, No J5 Methods

func (msg *EnumField) Clone() any {
	return proto.Clone(msg).(*EnumField)
}

// j5.ext.v1 is a J5 schema message, No J5 Methods

func (msg *OneofField) Clone() any {
	return proto.Clone(msg).(*OneofField)
}

// j5.ext.v1 is a J5 schema message, No J5 Methods

func (msg *PolymorphField) Clone() any {
	return proto.Clone(msg).(*PolymorphField)
}

// j5.ext.v1 is a J5 schema message, No J5 Methods

func (msg *MapField) Clone() any {
	return proto.Clone(msg).(*MapField)
}

// j5.ext.v1 is a J5 schema message, No J5 Methods

func (msg *ArrayField) Clone() any {
	return proto.Clone(msg).(*ArrayField)
}

// j5.ext.v1 is a J5 schema message, No J5 Methods

func (msg *StringField) Clone() any {
	return proto.Clone(msg).(*StringField)
}

// j5.ext.v1 is a J5 schema message, No J5 Methods

func (msg *IntegerField) Clone() any {
	return proto.Clone(msg).(*IntegerField)
}

// j5.ext.v1 is a J5 schema message, No J5 Methods

func (msg *IntegerField_Rules) Clone() any {
	return proto.Clone(msg).(*IntegerField_Rules)
}

// j5.ext.v1 is a J5 schema message, No J5 Methods

func (msg *FloatField) Clone() any {
	return proto.Clone(msg).(*FloatField)
}

// j5.ext.v1 is a J5 schema message, No J5 Methods

func (msg *BoolField) Clone() any {
	return proto.Clone(msg).(*BoolField)
}

// j5.ext.v1 is a J5 schema message, No J5 Methods

func (msg *BytesField) Clone() any {
	return proto.Clone(msg).(*BytesField)
}

// j5.ext.v1 is a J5 schema message, No J5 Methods

func (msg *DecimalField) Clone() any {
	return proto.Clone(msg).(*DecimalField)
}

// j5.ext.v1 is a J5 schema message, No J5 Methods

func (msg *DecimalField_Rules) Clone() any {
	return proto.Clone(msg).(*DecimalField_Rules)
}

// j5.ext.v1 is a J5 schema message, No J5 Methods

func (msg *DateField) Clone() any {
	return proto.Clone(msg).(*DateField)
}

// j5.ext.v1 is a J5 schema message, No J5 Methods

func (msg *DateField_Rules) Clone() any {
	return proto.Clone(msg).(*DateField_Rules)
}

// j5.ext.v1 is a J5 schema message, No J5 Methods

func (msg *TimestampField) Clone() any {
	return proto.Clone(msg).(*TimestampField)
}

// j5.ext.v1 is a J5 schema message, No J5 Methods

func (msg *KeyField) Clone() any {
	return proto.Clone(msg).(*KeyField)
}

type IsKeyField_Type = isKeyField_Type

// j5.ext.v1 is a J5 schema message, No J5 Methods

// KeyField_Format
const (
	KeyField_Format_UNSPECIFIED KeyField_Format = 0
	KeyField_Format_UUID        KeyField_Format = 2
	KeyField_Format_ID62        KeyField_Format = 3
)

var (
	KeyField_Format_name_short = map[int32]string{
		0: "UNSPECIFIED",
		2: "UUID",
		3: "ID62",
	}
	KeyField_Format_value_short = map[string]int32{
		"UNSPECIFIED": 0,
		"UUID":        2,
		"ID62":        3,
	}
	KeyField_Format_value_either = map[string]int32{
		"UNSPECIFIED":        0,
		"FORMAT_UNSPECIFIED": 0,
		"UUID":               2,
		"FORMAT_UUID":        2,
		"ID62":               3,
		"FORMAT_ID62":        3,
	}
)

// ShortString returns the un-prefixed string representation of the enum value
func (x KeyField_Format) ShortString() string {
	return KeyField_Format_name_short[int32(x)]
}
func (x KeyField_Format) Value() (driver.Value, error) {
	return []uint8(x.ShortString()), nil
}
func (x *KeyField_Format) Scan(value interface{}) error {
	var strVal string
	switch vt := value.(type) {
	case []uint8:
		strVal = string(vt)
	case string:
		strVal = vt
	default:
		return fmt.Errorf("invalid type %T", value)
	}
	val := KeyField_Format_value_either[strVal]
	*x = KeyField_Format(val)
	return nil
}
