// Code generated by protoc-gen-go-j5. DO NOT EDIT.
// No J5 Methods, this is a j5 schema package

package list_j5pb

import (
	proto "google.golang.org/protobuf/proto"
)

func (msg *QueryRequest) Clone() any {
	return proto.Clone(msg).(*QueryRequest)
}
func (msg *Search) Clone() any {
	return proto.Clone(msg).(*Search)
}
func (msg *Sort) Clone() any {
	return proto.Clone(msg).(*Sort)
}

// Filter is a oneof wrapper
type FilterTypeKey string

const (
	Filter_Type_Field FilterTypeKey = "field"
	Filter_Type_And   FilterTypeKey = "and"
	Filter_Type_Or    FilterTypeKey = "or"
)

func (x *Filter) TypeKey() (FilterTypeKey, bool) {
	switch x.Type.(type) {
	case *Filter_Field:
		return Filter_Type_Field, true
	case *Filter_And:
		return Filter_Type_And, true
	case *Filter_Or:
		return Filter_Type_Or, true
	default:
		return "", false
	}
}

type IsFilterWrappedType interface {
	TypeKey() FilterTypeKey
	proto.Message
}

func (x *Filter) Set(val IsFilterWrappedType) {
	switch v := val.(type) {
	case *Field:
		x.Type = &Filter_Field{Field: v}
	case *And:
		x.Type = &Filter_And{And: v}
	case *Or:
		x.Type = &Filter_Or{Or: v}
	}
}
func (x *Filter) Get() IsFilterWrappedType {
	switch v := x.Type.(type) {
	case *Filter_Field:
		return v.Field
	case *Filter_And:
		return v.And
	case *Filter_Or:
		return v.Or
	default:
		return nil
	}
}
func (x *Field) TypeKey() FilterTypeKey {
	return Filter_Type_Field
}
func (x *And) TypeKey() FilterTypeKey {
	return Filter_Type_And
}
func (x *Or) TypeKey() FilterTypeKey {
	return Filter_Type_Or
}
func (msg *Filter) Clone() any {
	return proto.Clone(msg).(*Filter)
}

type IsFilter_Type = isFilter_Type

func (msg *And) Clone() any {
	return proto.Clone(msg).(*And)
}
func (msg *Or) Clone() any {
	return proto.Clone(msg).(*Or)
}
func (msg *Field) Clone() any {
	return proto.Clone(msg).(*Field)
}

// FieldType is a oneof wrapper
type FieldTypeKey string

const (
	Field_Type_Value FieldTypeKey = "value"
	Field_Type_Range FieldTypeKey = "range"
	Field_Type_In    FieldTypeKey = "in"
)

func (x *FieldType) TypeKey() (FieldTypeKey, bool) {
	switch x.Type.(type) {
	case *FieldType_Value:
		return Field_Type_Value, true
	case *FieldType_Range:
		return Field_Type_Range, true
	case *FieldType_In:
		return Field_Type_In, true
	default:
		return "", false
	}
}
func (msg *FieldType) Clone() any {
	return proto.Clone(msg).(*FieldType)
}

type IsFieldType_Type = isFieldType_Type

func (msg *Range) Clone() any {
	return proto.Clone(msg).(*Range)
}
func (msg *Values) Clone() any {
	return proto.Clone(msg).(*Values)
}
