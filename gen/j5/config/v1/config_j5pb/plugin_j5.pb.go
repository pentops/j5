// Code generated by protoc-gen-go-j5. DO NOT EDIT.

package config_j5pb

import (
	driver "database/sql/driver"
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
)

func (msg *BuildPlugin) Clone() any {
	return proto.Clone(msg).(*BuildPlugin)
}

// j5.config.v1 is a J5 schema message, No J5 Methods

// PluginRunType is a oneof wrapper
type PluginRunTypeKey string

const (
	PluginRun_Type_Builtin PluginRunTypeKey = "builtin"
	PluginRun_Type_Local   PluginRunTypeKey = "local"
	PluginRun_Type_Docker  PluginRunTypeKey = "docker"
)

func (x *PluginRunType) TypeKey() (PluginRunTypeKey, bool) {
	switch x.Type.(type) {
	case *PluginRunType_Builtin:
		return PluginRun_Type_Builtin, true
	case *PluginRunType_Local:
		return PluginRun_Type_Local, true
	case *PluginRunType_Docker:
		return PluginRun_Type_Docker, true
	default:
		return "", false
	}
}
func (msg *PluginRunType) Clone() any {
	return proto.Clone(msg).(*PluginRunType)
}

type IsPluginRunType_Type = isPluginRunType_Type

// j5.config.v1 is a J5 schema message, No J5 Methods

func (msg *DockerSpec) Clone() any {
	return proto.Clone(msg).(*DockerSpec)
}

// j5.config.v1 is a J5 schema message, No J5 Methods

func (msg *CommandSpec) Clone() any {
	return proto.Clone(msg).(*CommandSpec)
}

// j5.config.v1 is a J5 schema message, No J5 Methods

func (msg *DockerRegistryAuth) Clone() any {
	return proto.Clone(msg).(*DockerRegistryAuth)
}

type IsDockerRegistryAuth_Auth = isDockerRegistryAuth_Auth

// j5.config.v1 is a J5 schema message, No J5 Methods

func (msg *DockerRegistryAuth_Basic) Clone() any {
	return proto.Clone(msg).(*DockerRegistryAuth_Basic)
}

// j5.config.v1 is a J5 schema message, No J5 Methods

func (msg *DockerRegistryAuth_AWSECS) Clone() any {
	return proto.Clone(msg).(*DockerRegistryAuth_AWSECS)
}

// j5.config.v1 is a J5 schema message, No J5 Methods

func (msg *DockerRegistryAuth_Github) Clone() any {
	return proto.Clone(msg).(*DockerRegistryAuth_Github)
}

// j5.config.v1 is a J5 schema message, No J5 Methods

func (msg *PluginOverride) Clone() any {
	return proto.Clone(msg).(*PluginOverride)
}

// j5.config.v1 is a J5 schema message, No J5 Methods

// Plugin
const (
	Plugin_UNSPECIFIED Plugin = 0
	Plugin_PROTO       Plugin = 1
	Plugin_J5_CLIENT   Plugin = 2
)

var (
	Plugin_name_short = map[int32]string{
		0: "UNSPECIFIED",
		1: "PROTO",
		2: "J5_CLIENT",
	}
	Plugin_value_short = map[string]int32{
		"UNSPECIFIED": 0,
		"PROTO":       1,
		"J5_CLIENT":   2,
	}
	Plugin_value_either = map[string]int32{
		"UNSPECIFIED":        0,
		"PLUGIN_UNSPECIFIED": 0,
		"PROTO":              1,
		"PLUGIN_PROTO":       1,
		"J5_CLIENT":          2,
		"PLUGIN_J5_CLIENT":   2,
	}
)

// ShortString returns the un-prefixed string representation of the enum value
func (x Plugin) ShortString() string {
	return Plugin_name_short[int32(x)]
}
func (x Plugin) Value() (driver.Value, error) {
	return []uint8(x.ShortString()), nil
}
func (x *Plugin) Scan(value interface{}) error {
	var strVal string
	switch vt := value.(type) {
	case []uint8:
		strVal = string(vt)
	case string:
		strVal = vt
	default:
		return fmt.Errorf("invalid type %T", value)
	}
	val := Plugin_value_either[strVal]
	*x = Plugin(val)
	return nil
}
