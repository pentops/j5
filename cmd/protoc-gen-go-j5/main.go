package main

import (
	"flag"
	"fmt"

	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/types/pluginpb"
)

var Version = "1.0"

func main() {
	showVersion := flag.Bool("version", false, "print the version and exit")
	flag.Parse()
	if *showVersion {
		fmt.Printf("protoc-gen-go-psm %v\n", Version)
		return
	}

	var flags flag.FlagSet

	protogen.Options{
		ParamFunc: flags.Set,
	}.Run(func(gen *protogen.Plugin) error {
		gen.SupportedFeatures = uint64(pluginpb.CodeGeneratorResponse_FEATURE_PROTO3_OPTIONAL)
		for _, f := range gen.Files {
			if !f.Generate {
				continue
			}
			err := generateFile(gen, f)
			if err != nil {
				gen.Error(err)
				return err
			}
		}
		return nil
	})
}

const (
	j5reflectImportPath = protogen.GoImportPath("github.com/pentops/j5/lib/j5reflect")
)

func generateFile(gen *protogen.Plugin, file *protogen.File) error {

	filename := file.GeneratedFilenamePrefix + "_j5.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-go-j5. DO NOT EDIT.")
	g.P()
	g.P("package ", file.GoPackageName)

	for _, msg := range file.Messages {
		g.P("func (msg *", msg.GoIdent, ") J5Reflect() ", j5reflectImportPath.Ident("Root"), " {")
		g.P("  return ", j5reflectImportPath.Ident("MustReflect"), "(msg)")
		g.P("}")
	}

	return nil
}
