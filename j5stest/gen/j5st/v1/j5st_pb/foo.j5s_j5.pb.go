// Code generated by protoc-gen-go-j5. DO NOT EDIT.

package j5st_pb

import (
	driver "database/sql/driver"
	fmt "fmt"
	j5reflect "github.com/pentops/j5/lib/j5reflect"
	proto "google.golang.org/protobuf/proto"
)

func (msg *FooKeys) Clone() any {
	return proto.Clone(msg).(*FooKeys)
}
func (msg *FooKeys) J5Reflect() j5reflect.Root {
	return j5reflect.MustReflect(msg.ProtoReflect())
}

func (msg *FooKeys) J5Object() j5reflect.Object {
	return j5reflect.MustReflect(msg.ProtoReflect()).(j5reflect.Object)
}

func (msg *FooData) Clone() any {
	return proto.Clone(msg).(*FooData)
}
func (msg *FooData) J5Reflect() j5reflect.Root {
	return j5reflect.MustReflect(msg.ProtoReflect())
}

func (msg *FooData) J5Object() j5reflect.Object {
	return j5reflect.MustReflect(msg.ProtoReflect()).(j5reflect.Object)
}

// FooData_Type
const (
	FooData_Type_UNSPECIFIED FooData_Type = 0
	FooData_Type_A           FooData_Type = 1
	FooData_Type_B           FooData_Type = 2
)

var (
	FooData_Type_name_short = map[int32]string{
		0: "UNSPECIFIED",
		1: "A",
		2: "B",
	}
	FooData_Type_value_short = map[string]int32{
		"UNSPECIFIED": 0,
		"A":           1,
		"B":           2,
	}
	FooData_Type_value_either = map[string]int32{
		"UNSPECIFIED":      0,
		"TYPE_UNSPECIFIED": 0,
		"A":                1,
		"TYPE_A":           1,
		"B":                2,
		"TYPE_B":           2,
	}
	FooData_Type_info = map[int32]map[string]string{
		1: map[string]string{
			"special": "true",
		},
		2: map[string]string{
			"special": "false",
		},
	}
)

// ShortString returns the un-prefixed string representation of the enum value
func (x FooData_Type) ShortString() string {
	return FooData_Type_name_short[int32(x)]
}
func (x FooData_Type) Value() (driver.Value, error) {
	return []uint8(x.ShortString()), nil
}
func (x *FooData_Type) Scan(value interface{}) error {
	var strVal string
	switch vt := value.(type) {
	case []uint8:
		strVal = string(vt)
	case string:
		strVal = vt
	default:
		return fmt.Errorf("invalid type %T", value)
	}
	val := FooData_Type_value_either[strVal]
	*x = FooData_Type(val)
	return nil
}
func (x FooData_Type) InfoSpecial() string {
	return FooData_Type_info[int32(x)]["special"]
}
func (msg *FooState) Clone() any {
	return proto.Clone(msg).(*FooState)
}
func (msg *FooState) J5Reflect() j5reflect.Root {
	return j5reflect.MustReflect(msg.ProtoReflect())
}

func (msg *FooState) J5Object() j5reflect.Object {
	return j5reflect.MustReflect(msg.ProtoReflect()).(j5reflect.Object)
}

// FooEventType is a oneof wrapper
type FooEventTypeKey string

const (
	FooEvent_Type_Create  FooEventTypeKey = "create"
	FooEvent_Type_Archive FooEventTypeKey = "archive"
)

func (x *FooEventType) TypeKey() (FooEventTypeKey, bool) {
	switch x.Type.(type) {
	case *FooEventType_Create_:
		return FooEvent_Type_Create, true
	case *FooEventType_Archive_:
		return FooEvent_Type_Archive, true
	default:
		return "", false
	}
}

type IsFooEventTypeWrappedType interface {
	FooEventTypeKey() FooEventTypeKey
	proto.Message
}

func (x *FooEventType) Set(val IsFooEventTypeWrappedType) {
	switch v := val.(type) {
	case *FooEventType_Create:
		x.Type = &FooEventType_Create_{Create: v}
	case *FooEventType_Archive:
		x.Type = &FooEventType_Archive_{Archive: v}
	}
}
func (x *FooEventType) Get() IsFooEventTypeWrappedType {
	switch v := x.Type.(type) {
	case *FooEventType_Create_:
		return v.Create
	case *FooEventType_Archive_:
		return v.Archive
	default:
		return nil
	}
}
func (x *FooEventType_Create) FooEventTypeKey() FooEventTypeKey {
	return FooEvent_Type_Create
}
func (x *FooEventType_Archive) FooEventTypeKey() FooEventTypeKey {
	return FooEvent_Type_Archive
}
func (msg *FooEventType) Clone() any {
	return proto.Clone(msg).(*FooEventType)
}

type IsFooEventType_Type = isFooEventType_Type

func (msg *FooEventType) J5Reflect() j5reflect.Root {
	return j5reflect.MustReflect(msg.ProtoReflect())
}

func (msg *FooEventType_Create) Clone() any {
	return proto.Clone(msg).(*FooEventType_Create)
}
func (msg *FooEventType_Create) J5Reflect() j5reflect.Root {
	return j5reflect.MustReflect(msg.ProtoReflect())
}

func (msg *FooEventType_Create) J5Object() j5reflect.Object {
	return j5reflect.MustReflect(msg.ProtoReflect()).(j5reflect.Object)
}

func (msg *FooEventType_Archive) Clone() any {
	return proto.Clone(msg).(*FooEventType_Archive)
}
func (msg *FooEventType_Archive) J5Reflect() j5reflect.Root {
	return j5reflect.MustReflect(msg.ProtoReflect())
}

func (msg *FooEventType_Archive) J5Object() j5reflect.Object {
	return j5reflect.MustReflect(msg.ProtoReflect()).(j5reflect.Object)
}

func (msg *FooEvent) Clone() any {
	return proto.Clone(msg).(*FooEvent)
}
func (msg *FooEvent) J5Reflect() j5reflect.Root {
	return j5reflect.MustReflect(msg.ProtoReflect())
}

func (msg *FooEvent) J5Object() j5reflect.Object {
	return j5reflect.MustReflect(msg.ProtoReflect()).(j5reflect.Object)
}

// FooStatus
const (
	FooStatus_UNSPECIFIED FooStatus = 0
	FooStatus_ACTIVE      FooStatus = 1
	FooStatus_INACTIVE    FooStatus = 2
)

var (
	FooStatus_name_short = map[int32]string{
		0: "UNSPECIFIED",
		1: "ACTIVE",
		2: "INACTIVE",
	}
	FooStatus_value_short = map[string]int32{
		"UNSPECIFIED": 0,
		"ACTIVE":      1,
		"INACTIVE":    2,
	}
	FooStatus_value_either = map[string]int32{
		"UNSPECIFIED":            0,
		"FOO_STATUS_UNSPECIFIED": 0,
		"ACTIVE":                 1,
		"FOO_STATUS_ACTIVE":      1,
		"INACTIVE":               2,
		"FOO_STATUS_INACTIVE":    2,
	}
)

// ShortString returns the un-prefixed string representation of the enum value
func (x FooStatus) ShortString() string {
	return FooStatus_name_short[int32(x)]
}
func (x FooStatus) Value() (driver.Value, error) {
	return []uint8(x.ShortString()), nil
}
func (x *FooStatus) Scan(value interface{}) error {
	var strVal string
	switch vt := value.(type) {
	case []uint8:
		strVal = string(vt)
	case string:
		strVal = vt
	default:
		return fmt.Errorf("invalid type %T", value)
	}
	val := FooStatus_value_either[strVal]
	*x = FooStatus(val)
	return nil
}
