// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: j5st/v1/topic/foo.p.j5s.proto

package j5st_tpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	FooPublishTopic_FooEvent_FullMethodName = "/j5st.v1.topic.FooPublishTopic/FooEvent"
)

// FooPublishTopicClient is the client API for FooPublishTopic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FooPublishTopicClient interface {
	FooEvent(ctx context.Context, in *FooEventMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type fooPublishTopicClient struct {
	cc grpc.ClientConnInterface
}

func NewFooPublishTopicClient(cc grpc.ClientConnInterface) FooPublishTopicClient {
	return &fooPublishTopicClient{cc}
}

func (c *fooPublishTopicClient) FooEvent(ctx context.Context, in *FooEventMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, FooPublishTopic_FooEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FooPublishTopicServer is the server API for FooPublishTopic service.
// All implementations must embed UnimplementedFooPublishTopicServer
// for forward compatibility
type FooPublishTopicServer interface {
	FooEvent(context.Context, *FooEventMessage) (*emptypb.Empty, error)
	mustEmbedUnimplementedFooPublishTopicServer()
}

// UnimplementedFooPublishTopicServer must be embedded to have forward compatible implementations.
type UnimplementedFooPublishTopicServer struct {
}

func (UnimplementedFooPublishTopicServer) FooEvent(context.Context, *FooEventMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FooEvent not implemented")
}
func (UnimplementedFooPublishTopicServer) mustEmbedUnimplementedFooPublishTopicServer() {}

// UnsafeFooPublishTopicServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FooPublishTopicServer will
// result in compilation errors.
type UnsafeFooPublishTopicServer interface {
	mustEmbedUnimplementedFooPublishTopicServer()
}

func RegisterFooPublishTopicServer(s grpc.ServiceRegistrar, srv FooPublishTopicServer) {
	s.RegisterService(&FooPublishTopic_ServiceDesc, srv)
}

func _FooPublishTopic_FooEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FooEventMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FooPublishTopicServer).FooEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FooPublishTopic_FooEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FooPublishTopicServer).FooEvent(ctx, req.(*FooEventMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// FooPublishTopic_ServiceDesc is the grpc.ServiceDesc for FooPublishTopic service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FooPublishTopic_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "j5st.v1.topic.FooPublishTopic",
	HandlerType: (*FooPublishTopicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FooEvent",
			Handler:    _FooPublishTopic_FooEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "j5st/v1/topic/foo.p.j5s.proto",
}

const (
	FooSummaryTopic_FooSummary_FullMethodName = "/j5st.v1.topic.FooSummaryTopic/FooSummary"
)

// FooSummaryTopicClient is the client API for FooSummaryTopic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FooSummaryTopicClient interface {
	FooSummary(ctx context.Context, in *FooSummaryMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type fooSummaryTopicClient struct {
	cc grpc.ClientConnInterface
}

func NewFooSummaryTopicClient(cc grpc.ClientConnInterface) FooSummaryTopicClient {
	return &fooSummaryTopicClient{cc}
}

func (c *fooSummaryTopicClient) FooSummary(ctx context.Context, in *FooSummaryMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, FooSummaryTopic_FooSummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FooSummaryTopicServer is the server API for FooSummaryTopic service.
// All implementations must embed UnimplementedFooSummaryTopicServer
// for forward compatibility
type FooSummaryTopicServer interface {
	FooSummary(context.Context, *FooSummaryMessage) (*emptypb.Empty, error)
	mustEmbedUnimplementedFooSummaryTopicServer()
}

// UnimplementedFooSummaryTopicServer must be embedded to have forward compatible implementations.
type UnimplementedFooSummaryTopicServer struct {
}

func (UnimplementedFooSummaryTopicServer) FooSummary(context.Context, *FooSummaryMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FooSummary not implemented")
}
func (UnimplementedFooSummaryTopicServer) mustEmbedUnimplementedFooSummaryTopicServer() {}

// UnsafeFooSummaryTopicServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FooSummaryTopicServer will
// result in compilation errors.
type UnsafeFooSummaryTopicServer interface {
	mustEmbedUnimplementedFooSummaryTopicServer()
}

func RegisterFooSummaryTopicServer(s grpc.ServiceRegistrar, srv FooSummaryTopicServer) {
	s.RegisterService(&FooSummaryTopic_ServiceDesc, srv)
}

func _FooSummaryTopic_FooSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FooSummaryMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FooSummaryTopicServer).FooSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FooSummaryTopic_FooSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FooSummaryTopicServer).FooSummary(ctx, req.(*FooSummaryMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// FooSummaryTopic_ServiceDesc is the grpc.ServiceDesc for FooSummaryTopic service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FooSummaryTopic_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "j5st.v1.topic.FooSummaryTopic",
	HandlerType: (*FooSummaryTopicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FooSummary",
			Handler:    _FooSummaryTopic_FooSummary_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "j5st/v1/topic/foo.p.j5s.proto",
}
