syntax = "proto3";

package j5.schema.v1;

import "buf/validate/validate.proto";
import "google/protobuf/timestamp.proto";
import "j5/list/v1/annotations.proto";

option go_package = "github.com/pentops/j5/gen/j5/schema/v1/schema_j5pb";

message RootSchema {
  oneof type {
    Oneof oneof = 12;
    Object object = 21;
    Enum enum = 32;
    Polymorph polymorph = 33;
  }
}

message Field {
  oneof type {
    option (buf.validate.oneof).required = true;
    // Special Cases
    AnyField any = 11;

    // Named Root Types, wrapped as Field to separate the object-property rules
    // from the type itself.
    OneofField oneof = 12;
    ObjectField object = 21;
    PolymorphField polymorph = 13;
    EnumField enum = 32;

    // Complex Types
    ArrayField array = 20;
    MapField map = 22;

    // Scalar Types
    StringField string = 30;
    IntegerField integer = 31;
    FloatField float = 33;
    BoolField bool = 34;
    BytesField bytes = 35;
    DecimalField decimal = 36;
    DateField date = 37;
    TimestampField timestamp = 38;
    KeyField key = 39;
  }
}

// Ref is a reference to a RootSchema (object, oneof or enum) which is used in
// fields.
message Ref {
  string package = 1; // Dot notation, 'j5.schema.v1'
  string schema = 2; // Schema name, 'Ref'
}

// Like Ref but to an entity rather than a schema
message EntityRef {
  string package = 1; // Dot notation, 'foo.bar.v1'
  string entity = 2; // The *entity* name, not schema, 'foo' not 'FooState'
}

// Allows anything
message AnyField {
  j5.list.v1.AnyRules list_rules = 5;

  // DEPRECATED: Use Polymorph instead.
  bool only_defined = 6;
  // DEPRECATED: Use Polymorph instead.
  repeated string types = 7;
}

// ObjectAsField is an object as-a-field in an ObjectProperty
message ObjectField {
  oneof schema {
    Ref ref = 1; // Will always point to an Object.
    Object object = 2;
  }

  Rules rules = 5;
  Ext ext = 6;

  // When true, the fields of the child message are flattened into the parent
  // message in JSON encoding and client schemas.
  bool flatten = 7;

  // Valid only in entity state objects, this field references another entity.
  // The states of the entities are independent, the content of this field will
  // change through events in the referenced entity only.
  // The content of this field should not be stored with the state.
  EntityJoin entity = 8;

  message Rules {
    optional uint64 min_properties = 1;
    optional uint64 max_properties = 2;
  }

  message Ext {}

  message EntityJoin {
    // The reference to the entity. This does not effect the schema of the
    // field, use ref or object as usual.
    EntityRef entity = 1;

    // Later. Same database, but unsure how the commitment
    // will work over time.
    // bool atomic = 2;

    // Which part of the entity is being referenced.
    // STATE means a full state copy
    // DATA is just the data object.
    // DERIVED is used when a custom representation is used in the reference,
    // i.e. a summary of the parts important to this representation.
    EntityPart entity_part = 3;
  }
}

message InlineObject {
  repeated ObjectProperty properties = 1;
}

message Object {
  string name = 1; // [(buf.validate.field).string.pattern = "^[A-Z][a-zA-Z0-9_]*$"];

  string description = 2; // brief text description, will not contain markdown.

  // When the object is an entity type, the entity details are available in the
  // entity set for the same package.
  EntityObject entity = 3;

  repeated ObjectProperty properties = 4;

  // The names of any Polymorph types this object is a member of.
  repeated string polymorph_member = 5;
}

message EntityObject {
  string entity = 1 [(buf.validate.field).string.pattern = "^[A-Z][a-zA-Z0-9_]*$"];
  EntityPart part = 2;
}

enum EntityPart {
  ENTITY_PART_UNSPECIFIED = 0;
  ENTITY_PART_KEYS = 1; // Contains the immutable keys of the entity, primary, foreign and natural.
  ENTITY_PART_STATE = 2; // The full state object containing Keys, Data, Status and References.
  ENTITY_PART_EVENT = 3; // The event object, wrapping the event types.
  ENTITY_PART_DATA = 4; // The mutable and non-key data of an entity.
  ENTITY_PART_REFERENCES = 5; // A collection of references to other state entities.
  ENTITY_PART_DERIVED = 6; // one of potentially many derived representations of the entity.
}

message PolymorphField {
  oneof schema {
    Ref ref = 1; // Will always point to a Poly
    Polymorph polymorph = 2;
  }

  Rules rules = 4;
  //j5.list.v1.PolyRules list_rules = 5;
  Ext ext = 6;

  message Rules {}
  message Ext {}
}

// A polymorph is like an any, however only the types listed are permitted in the field, making it a
// constrained any, or a detached oneof.
// Types which are members of this Poly must be listed in the types field.
// To be a member, an implementing object must import the package of the Poly,
// reversing the import path of a Oneof
message Polymorph {
  string name = 1;
  string description = 2;

  repeated string members = 4;
}

message OneofField {
  oneof schema {
    Ref ref = 1; // Will always point to a Oneof
    Oneof oneof = 2;
  }

  Rules rules = 4;
  j5.list.v1.OneofRules list_rules = 5;
  Ext ext = 6;

  message Rules {}
  message Ext {}
}

// Similar to ObjectItem (it is an object in JSON Schema), but where exactly one
// property should be set
message Oneof {
  string name = 1;
  string description = 2;

  repeated ObjectProperty properties = 3;
}

message EnumField {
  oneof schema {
    Ref ref = 1; // Will always point to an Enum
    Enum enum = 2;
  }

  Rules rules = 4;
  j5.list.v1.EnumRules list_rules = 5;
  Ext ext = 6;

  message Rules {
    repeated string in = 1;
    repeated string not_in = 2;
  }
  message Ext {}
}

message Enum {
  string name = 1;
  string description = 2;
  string prefix = 3;

  repeated Option options = 4;
  message Option {
    string name = 1;
    int32 number = 2;
    string description = 3;
    map<string, string> info = 4;
  }

  repeated OptionInfoField info = 6;
  message OptionInfoField {
    string name = 1;
    string label = 2;
    string description = 3;
  }
}

message ArrayField {
  Rules rules = 1;
  Field items = 2;
  Ext ext = 3;

  message Ext {
    // The name of the singular form of the array item, used in documentation and
    // block parsing.
    optional string single_form = 3;
  }

  message Rules {
    optional uint64 min_items = 1;
    optional uint64 max_items = 2;
    optional bool unique_items = 3;
  }
}

message MapField {
  Field item_schema = 1;
  Field key_schema = 2;
  Rules rules = 3;
  Ext ext = 4;

  message Rules {
    optional uint64 min_pairs = 1;
    optional uint64 max_pairs = 2;
  }

  message Ext {
    // The name of the singular form of the map pairs, used in documentation and
    // block parsing.
    optional string single_form = 3;
  }
}

message StringField {
  optional string format = 1;
  Rules rules = 3;
  list.v1.OpenTextRules list_rules = 4;
  Ext ext = 5;

  message Rules {
    optional string pattern = 1;
    optional uint64 min_length = 2;
    optional uint64 max_length = 3;
  }

  message Ext {}
}

message FloatField {
  Format format = 1;
  Rules rules = 2;
  j5.list.v1.FloatRules list_rules = 3;
  Ext ext = 4;

  enum Format {
    FORMAT_UNSPECIFIED = 0;
    FORMAT_FLOAT32 = 1;
    FORMAT_FLOAT64 = 2;
  }

  message Rules {
    optional bool exclusive_maximum = 1;
    optional bool exclusive_minimum = 2;
    optional double minimum = 3;
    optional double maximum = 4;
    optional double multiple_of = 5;
  }
  message Ext {}
}

message IntegerField {
  Format format = 1 [(buf.validate.field) = {
    enum: {not_in: 0}
    required: true
  }];
  Rules rules = 2;
  j5.list.v1.IntegerRules list_rules = 3;
  Ext ext = 4;

  enum Format {
    FORMAT_UNSPECIFIED = 0;
    FORMAT_INT32 = 1;
    FORMAT_INT64 = 2;
    FORMAT_UINT32 = 3;
    FORMAT_UINT64 = 4;
  }

  message Rules {
    optional bool exclusive_maximum = 1;
    optional bool exclusive_minimum = 2;
    optional int64 minimum = 3;
    optional int64 maximum = 4;
    optional int64 multiple_of = 5;
  }

  message Ext {}
}

message BoolField {
  Rules rules = 1;
  j5.list.v1.BoolRules list_rules = 2;
  Ext ext = 3;

  message Rules {
    optional bool const = 1;
  }

  message Ext {}
}

message BytesField {
  Rules rules = 1;
  Ext ext = 4;

  message Rules {
    optional uint64 min_length = 1;
    optional uint64 max_length = 2;
  }

  message Ext {}
}

message DecimalField {
  Rules rules = 1;
  j5.list.v1.DecimalRules list_rules = 2;
  Ext ext = 3;

  message Rules {
    optional string minimum = 1;
    optional string maximum = 2;
    optional bool exclusive_minimum = 3;
    optional bool exclusive_maximum = 4;
  }
  message Ext {}
}

message DateField {
  Rules rules = 1;
  j5.list.v1.DateRules list_rules = 2;
  Ext ext = 3;

  message Rules {
    optional string minimum = 1;
    optional string maximum = 2;
    optional bool exclusive_minimum = 3;
    optional bool exclusive_maximum = 4;
  }
  message Ext {}
}

message TimestampField {
  Rules rules = 1;
  j5.list.v1.TimestampRules list_rules = 2;
  Ext ext = 3;

  message Rules {
    optional google.protobuf.Timestamp minimum = 1;
    optional google.protobuf.Timestamp maximum = 2;
    optional bool exclusive_minimum = 3;
    optional bool exclusive_maximum = 4;
  }
  message Ext {}
}

message KeyField {
  Rules rules = 1;
  KeyFormat format = 2;
  j5.list.v1.KeyRules list_rules = 3;
  Ext ext = 4;
  EntityKey entity = 5;

  message Rules {}
  message Ext {}
}

message EntityKey {
  //# unexposed oneof, mainly because of the circular dependency between ext and
  //# schema, but also to avoid further clutter in the proto tags.
  oneof type {
    // the field is the primary key of the state entity. It is only valid in the
    // keys object of an entity.
    bool primary_key = 1;

    // When set, this key should be in the keys of an entity, and references the
    // primary key of another entity.
    EntityRef foreign_key = 2;
  }

  // Marks the field as containing a tenant_id for the given tenant. Copies to
  // j5.state.v1.PublishAuth.tenant_keys on publish
  optional string tenant_key = 5;
}

message KeyFormat {
  oneof type {
    Informal informal = 1;
    Custom custom = 2;
    UUID uuid = 3;
    ID62 id62 = 4;
  }

  message Informal {}
  message Custom {
    string pattern = 1 [(buf.validate.field).required = true];
  }
  message UUID {}
  message ID62 {}
}

message ObjectProperty {
  Field schema = 1;
  string name = 3;
  bool required = 4;
  bool explicitly_optional = 5;
  //bool read_only = 6;
  //bool write_only = 7;
  string description = 8;

  // For flattened objects,
  // Defines the path from the root proto message to the field. All but the last
  // node will be message fields holding a message kind, and the last node is
  // the field containing the property type.
  repeated int32 proto_field = 11;
}
